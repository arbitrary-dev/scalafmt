continuationIndent.caseSite = 0
<<< Long if
case tok if tok.left.name.startsWith("xml") && tok.right.name.startsWith("xml") => List( NoSplit0 )
>>>
case tok
if tok.left.name.startsWith("xml") && tok.right.name.startsWith("xml") =>
  List(NoSplit0)
<<< Pathological if
case FormatToken(left, open: `(`, _)
    if owners(open).isInstanceOf[Term.Apply] ||
      owners(left).parent.exists(_.isInstanceOf[Defn.Def]) ||
      owners(left).parent.exists(_.isInstanceOf[Defn.Class]) =>
  List(
    NoSplit0
  )
>>>
case FormatToken(left, open: `(`, _)
if owners(open).isInstanceOf[Term.Apply] ||
  owners(left).parent.exists(_.isInstanceOf[Defn.Def]) ||
  owners(left).parent.exists(_.isInstanceOf[Defn.Class]) =>
  List(
    NoSplit0
  )
<<< wrapped cond inside if
case Decision(t@FormatToken(comma: `,`, right, between), splits)
        if owners.get(open) == owners.get(comma) &&
        // If comment is bound to comma, see unit/Comment.
        (
          !right.isInstanceOf[Comment] ||
          between.exists(_.isInstanceOf[`\n`])) =>
      Decision(t, splits.filter(_.modification == Newline))
>>>
case Decision(t @ FormatToken(comma: `,`, right, between), splits)
if owners.get(open) == owners.get(comma) &&
  // If comment is bound to comma, see unit/Comment.
  (!right.isInstanceOf[Comment] ||
    between.exists(_.isInstanceOf[`\n`])) =>
  Decision(t, splits.filter(_.modification == Newline))
<<< or #177
   case NullTag
           | UnitTag
           | BooleanTag
           | ByteTag
           | ShortTag
           | CharTag
           | IntTag
           | LongTag
           | FloatTag
           | DoubleTag
           | StringTag =>
         focus withValue genLiteralValue(lit)
>>>
case NullTag | UnitTag | BooleanTag | ByteTag | ShortTag | CharTag | IntTag |
LongTag | FloatTag | DoubleTag | StringTag =>
  focus withValue genLiteralValue(lit)
<<< gimme space with config style
      case e @ (
      _: NoSuchMethodException | _: SecurityException |
                _: IllegalAccessException | _: IllegalArgumentException |
                _: InvocationTargetException | _: NullPointerException |
                _: ClassNotFoundException
                ) =>
                 qux
>>>
case e @ (
  _: NoSuchMethodException | _: SecurityException | _: IllegalAccessException |
  _: IllegalArgumentException | _: InvocationTargetException |
  _: NullPointerException | _: ClassNotFoundException
) =>
  qux
<<< gimme space with config style, with guard
      case e @ (
      _: NoSuchMethodException | _: SecurityException |
                _: IllegalAccessException | _: IllegalArgumentException |
                _: InvocationTargetException | _: NullPointerException |
                _: ClassNotFoundException
                ) /* c1 */ if /* c2 */ foo(
                 bar,
                 baz
                 ) =>
                 qux
>>>
case e @ (
  _: NoSuchMethodException | _: SecurityException | _: IllegalAccessException |
  _: IllegalArgumentException | _: InvocationTargetException |
  _: NullPointerException | _: ClassNotFoundException
) /* c1 */
if /* c2 */ foo(
  bar,
  baz
) =>
  qux
<<< gimme space with config style, with infix
      case e @ (
      _: NoSuchMethodException | _: SecurityException |
                _: IllegalAccessException | _: IllegalArgumentException |
                _: InvocationTargetException | _: NullPointerException |
                _: ClassNotFoundException
                ) infix foo(
                 bar,
                 baz
                 ) =>
                 qux
>>>
case e @ (
  _: NoSuchMethodException | _: SecurityException | _: IllegalAccessException |
  _: IllegalArgumentException | _: InvocationTargetException |
  _: NullPointerException | _: ClassNotFoundException
) infix foo(
  bar,
  baz
) =>
  qux
<<< gimme space with config style, with infix and nest
      case e @ (
      _: NoSuchMethodException | _: SecurityException |
                _: IllegalAccessException | _: IllegalArgumentException |
                _: InvocationTargetException | _: NullPointerException |
                _: ClassNotFoundException
                )
                infix (
                foo(
                 bar,
                 baz
                 )
                 anotherInfix foo(
                        bar,
                        baz
                    )
                ) =>
                 qux
>>>
case e @ (
  _: NoSuchMethodException | _: SecurityException | _: IllegalAccessException |
  _: IllegalArgumentException | _: InvocationTargetException |
  _: NullPointerException | _: ClassNotFoundException
)
infix (
  foo(
    bar,
    baz
  )
  anotherInfix foo(
    bar,
    baz
  )
) =>
  qux
<<< bodyBlock
maxColumn = 30
===
case _: SomeThing |
    _: SomeThingAgain => {
???
}
>>>
case _: SomeThing |
_: SomeThingAgain => {
  ???
}
